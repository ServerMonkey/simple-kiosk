#!/bin/sh

# run from anywhere
APP_DIR_FULL=$(realpath "$0")
APP_DIR=$(dirname "$APP_DIR_FULL")
cd "$APP_DIR" || exit 1

# automatic increase minor version number whith each build
VERSION_FILE="version"
VERSION_MAJOR=$(sed -n '1p' $VERSION_FILE)
VERSION_MINOR=$(sed -n '2p' $VERSION_FILE)
VERSION_MINOR_NEW=$((1 + VERSION_MINOR))
sed -i "2 s/$VERSION_MINOR\$/$VERSION_MINOR_NEW/g" $VERSION_FILE
VERSION="$VERSION_MAJOR.$VERSION_MINOR_NEW"

# variables
NAME="simple-kiosk"
README="README.md"
RELEASES="releases"
TARGET="DEBIAN"
MAN_PAGE=1
FILE_MAN="$NAME.$MAN_PAGE"
PATH_BASE="./$RELEASES/$NAME-$VERSION"
PATH_BUILD="$PATH_BASE/build"
PATH_BUILD_SRC="$PATH_BUILD/$NAME-linux-x64"
PATH_INSTALL="$PATH_BASE/usr/local"
# PATH_BIN="$PATH_INSTALL/bin"
PATH_SHARE="$PATH_INSTALL/share/$NAME"
PATH_TARGET="$PATH_BASE/$TARGET"
PATH_MAN="$PATH_BUILD_SRC/share/man/man$MAN_PAGE"
PATH_JSON="$PATH_BASE/package.json"

# delete the old build
echo "Cleaning up old build"
rm -rf "$PATH_BASE"

# copy relevant files from source to release
echo "Copying relevant source files"
mkdir -p "$PATH_BASE"
cp -t "$PATH_BASE" "index.js" "package.json" "README.md" "copyright" || exit 1

# get description
DESCRIPTION=$(sed -n -e '1 s/^.*) -- //p' <"$README") || exit 1

# build electron app
# set variables
sed -i "s/<VERSION>/$VERSION_MAJOR.$VERSION_MINOR_NEW/g" "$PATH_JSON"
sed -i "s/<DESCRIPTION>/$DESCRIPTION/g" "$PATH_JSON"
npx electron-packager "$PATH_BASE" "$NAME" --platform linux --arch x64 --out "$PATH_BUILD"
# build man page
#mkdir -p "$PATH_MAN"
#ronn -r <"$README" | gzip -9n >"$PATH_MAN/$FILE_MAN" || exit 1
# build .deb
npx electron-installer-debian --src "$PATH_BUILD_SRC" --dest "$RELEASES" --arch amd64
mv "./$RELEASES/$NAME""_""$VERSION""_amd64.deb" "$PATH_BASE.deb" || exit 1

# pack source files
echo "Packing source"
zip -q -r "$RELEASES/$NAME-$VERSION.source.zip" ./* \
    -x $RELEASES\* \
    -x .*\* \
    -x ./*DEV_\* \
    -x ./*node_modules\* \
    -x ./*package-lock.json\*
wait

# replace latest version
cp "$PATH_BASE.deb" "$RELEASES/$NAME-LATEST.deb"
cp "$PATH_BASE.source.zip" "$RELEASES/$NAME-LATEST-source.zip"

# clean up
echo "Clean up"
rm -rf "$PATH_BASE"

# check
echo "Checking:"
lintian -c "$PATH_BASE.deb"
